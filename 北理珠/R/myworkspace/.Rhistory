setwd('D:/git/lyz05/北理珠/R/myworkspace')#设置工作目录
data<-read.table("wdbc.txt",header = FALSE,na.strings = "NA",sep=',')
data
sum(is.na(data))
data<-subset(data,select = -V1)
train_sub <- sample(nrow(data),0.7*nrow(data))##随机无放回抽取
TD <- data[train_sub,]
PD <- data[-train_sub,]##
library(rpart)
library(rpart.plot)
#把数据集分为两个部分，训练集TD和测试集PD，分别读入，这里假设已经读入了这两个对象。分别为TD和PD
#自行设置预修剪等相关参数，这里都是默认值，并建立模型
Ctl<-rpart.control(minsplit=2,maxcompete=4,xval=10,maxdepth=10,cp=0.01)
Treefit<-rpart(formula = UNS ~ ., data = TD, method = "class", parms = list(split = "gini"),control=Ctl)
#使用printcp和plotcp查看其复杂参数对模型影响，主要看的是预测误差的标准误xstd，从plotcp里面可以看到与虚线最近的点即为误差最小的点，所以，对应的cp值可以作为修剪的近似值。
printcp(Treefit)
plotcp(Treefit)
#使用prune对树进行修剪，修剪cp值从图中近似得出
prune(Treefit,0.023) #其实这个数据集使用默认参数时就差不多是最优解了，不需要再进行修剪。
#预测训练集和测试集
Pred<-predict(Treefit,TD[,1:5],type="class")
Pred2<-predict(Treefit,PD[,1:5],type="class")
#对比原样本分类
table(Pred,TD[,6])
table(Pred2,PD[,6])
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
tdata <- data[train_sub,]
vdata <- data[-train_sub,]##
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
tree<-prune(dtree,cp=0.0125)
rpart.plot(dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
rpart.plot(tree,branch=1, type=4,fallen.leaves=T,cex=0.8, sub="剪枝后")
rpart.plot(dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
predtree<-predict(tree,newdata=vdata,type="class")   #利用预测集进行预测
table(vdata$class,predtree,dnn=c("真实值","预测值"))    #输出混淆矩阵
predtree<-predict(tree,newdata=vdata,type="class")   #利用预测集进行预测
table(vdata$V2,predtree,dnn=c("真实值","预测值"))    #输出混淆矩阵
train_sub <- sample(nrow(data),0.7*nrow(data))##随机无放回抽取
tdata <- data[train_sub,]
vdata <- data[-train_sub,]##
library(rpart)
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
tree<-prune(dtree,cp=0.0125)
rpart.plot(dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
rpart.plot(tree,branch=1, type=4,fallen.leaves=T,cex=0.8, sub="剪枝后")
predtree<-predict(tree,newdata=vdata,type="class")   #利用预测集进行预测
table(vdata$V2,predtree,dnn=c("真实值","预测值"))    #输出混淆矩阵
train_sub <- sample(nrow(data),0.7*nrow(data))##随机无放回抽取
tdata <- data[train_sub,]
vdata <- data[-train_sub,]##
library(rpart)
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
tree<-prune(dtree,cp=0.0125)
rpart.plot(dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
rpart.plot(tree,branch=1, type=4,fallen.leaves=T,cex=0.8, sub="剪枝后")
predtree<-predict(tree,newdata=vdata,type="class")   #利用预测集进行预测
table(vdata$V2,predtree,dnn=c("真实值","预测值"))    #输出混淆矩阵
train_sub <- sample(nrow(data),0.7*nrow(data))##随机无放回抽取
tdata <- data[train_sub,]
vdata <- data[-train_sub,]##
library(rpart)
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
tree<-prune(dtree,cp=0.0125)
rpart.plot(dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
rpart.plot(tree,branch=1, type=4,fallen.leaves=T,cex=0.8, sub="剪枝后")
predtree<-predict(tree,newdata=vdata,type="class")   #利用预测集进行预测
table(vdata$V2,predtree,dnn=c("真实值","预测值"))    #输出混淆矩阵
train_sub <- sample(nrow(data),0.7*nrow(data))##随机无放回抽取
tdata <- data[train_sub,]
vdata <- data[-train_sub,]##
library(rpart)
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
tree<-prune(dtree,cp=0.0125)
rpart.plot(dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
rpart.plot(tree,branch=1, type=4,fallen.leaves=T,cex=0.8, sub="剪枝后")
predtree<-predict(tree,newdata=vdata,type="class")   #利用预测集进行预测
table(vdata$V2,predtree,dnn=c("真实值","预测值"))    #输出混淆矩阵
train_sub <- sample(nrow(data),0.7*nrow(data))##随机无放回抽取
tdata <- data[train_sub,]
vdata <- data[-train_sub,]##
library(rpart)
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
tree<-prune(dtree,cp=0.0125)
rpart.plot(dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
rpart.plot(tree,branch=1, type=4,fallen.leaves=T,cex=0.8, sub="剪枝后")
predtree<-predict(tree,newdata=vdata,type="class")   #利用预测集进行预测
table(vdata$V2,predtree,dnn=c("真实值","预测值"))    #输出混淆矩阵
train_sub <- sample(nrow(data),0.7*nrow(data))##随机无放回抽取
tdata <- data[train_sub,]
vdata <- data[-train_sub,]##
library(rpart)
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
tree<-prune(dtree,cp=0.0125)
rpart.plot(dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
rpart.plot(tree,branch=1, type=4,fallen.leaves=T,cex=0.8, sub="剪枝后")
predtree<-predict(tree,newdata=vdata,type="class")   #利用预测集进行预测
table(vdata$V2,predtree,dnn=c("真实值","预测值"))    #输出混淆矩阵
train_sub <- sample(nrow(data),0.7*nrow(data))##随机无放回抽取
tdata <- data[train_sub,]
vdata <- data[-train_sub,]##
library(rpart)
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
tree<-prune(dtree,cp=0.0125)
rpart.plot(dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
rpart.plot(tree,branch=1, type=4,fallen.leaves=T,cex=0.8, sub="剪枝后")
predtree<-predict(tree,newdata=vdata,type="class")   #利用预测集进行预测
table(vdata$V2,predtree,dnn=c("真实值","预测值"))    #输出混淆矩阵
train_sub <- sample(nrow(data),0.7*nrow(data))##随机无放回抽取
tdata <- data[train_sub,]
vdata <- data[-train_sub,]##
library(rpart)
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
tree<-prune(dtree,cp=0.0125)
rpart.plot(dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
rpart.plot(tree,branch=1, type=4,fallen.leaves=T,cex=0.8, sub="剪枝后")
predtree<-predict(tree,newdata=vdata,type="class")   #利用预测集进行预测
table(vdata$V2,predtree,dnn=c("真实值","预测值"))    #输出混淆矩阵
train_sub <- sample(nrow(data),0.7*nrow(data))##随机无放回抽取
tdata <- data[train_sub,]
vdata <- data[-train_sub,]##
library(rpart)
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
tree<-prune(dtree,cp=0.0125)
rpart.plot(dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
rpart.plot(tree,branch=1, type=4,fallen.leaves=T,cex=0.8, sub="剪枝后")
predtree<-predict(tree,newdata=vdata,type="class")   #利用预测集进行预测
table(vdata$V2,predtree,dnn=c("真实值","预测值"))    #输出混淆矩阵
train_sub <- sample(nrow(data),0.7*nrow(data))##随机无放回抽取
tdata <- data[train_sub,]
vdata <- data[-train_sub,]##
library(rpart)
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
tree<-prune(dtree,cp=0.0125)
rpart.plot(dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
rpart.plot(tree,branch=1, type=4,fallen.leaves=T,cex=0.8, sub="剪枝后")
predtree<-predict(tree,newdata=vdata,type="class")   #利用预测集进行预测
table(vdata$V2,predtree,dnn=c("真实值","预测值"))    #输出混淆矩阵
train_sub <- sample(nrow(data),0.7*nrow(data))##随机无放回抽取
tdata <- data[train_sub,]
vdata <- data[-train_sub,]##
library(rpart)
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
tree<-prune(dtree,cp=0.0125)
rpart.plot(dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
rpart.plot(tree,branch=1, type=4,fallen.leaves=T,cex=0.8, sub="剪枝后")
predtree<-predict(tree,newdata=vdata,type="class")   #利用预测集进行预测
table(vdata$V2,predtree,dnn=c("真实值","预测值"))    #输出混淆矩阵
train_sub <- sample(nrow(data),0.7*nrow(data))##随机无放回抽取
tdata <- data[train_sub,]
vdata <- data[-train_sub,]##
library(rpart)
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
tree<-prune(dtree,cp=0.0125)
rpart.plot(dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
rpart.plot(tree,branch=1, type=4,fallen.leaves=T,cex=0.8, sub="剪枝后")
predtree<-predict(tree,newdata=vdata,type="class")   #利用预测集进行预测
table(vdata$V2,predtree,dnn=c("真实值","预测值"))    #输出混淆矩阵
train_sub <- sample(nrow(data),0.7*nrow(data))##随机无放回抽取
tdata <- data[train_sub,]
vdata <- data[-train_sub,]##
library(rpart)
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
dtree<-rpart(V2~.,data=tdata,method="class", parms=list(split="information"))
printcp(dtree)
tree<-prune(dtree,cp=0.0125)
rpart.plot(dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
rpart.plot(tree,branch=1, type=4,fallen.leaves=T,cex=0.8, sub="剪枝后")
predtree<-predict(tree,newdata=vdata,type="class")   #利用预测集进行预测
table(vdata$V2,predtree,dnn=c("真实值","预测值"))    #输出混淆矩阵
