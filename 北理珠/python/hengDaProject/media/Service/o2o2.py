# -*- coding: utf-8 -*-
"""O2O2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IgFr8WdnsVt6jnBLaNmaXqTzhospRcHu
"""

import os
# 切换工作目录
os.chdir("drive/MyDrive/O2O")

import  pandas as pd
import numpy as np
from sklearn.ensemble  import  GradientBoostingClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import  roc_auc_score    #计算AUC的

offline_train = pd.read_csv('ccf_offline_stage1_train.csv')
offline_test = pd.read_csv('ccf_offline_stage1_test_revised.csv')

offline_train.dropna(subset=['Coupon_id'],inplace=True)

#根据赛题的要求，把正负样本标注出来
def is_used(column):
    if not np.isnan(column['Date']) and not np.isnan(column['Coupon_id']):
        return 1
    elif np.isnan(column['Date']) and not np.isnan(column['Coupon_id']):
        return 0
    else:
        return 0

offline_train['label'] = offline_train.apply(is_used,axis=1)

#由于Discount_rate优惠率的特殊格式:"150:20",很难使用算法来计算使用
#根据实际情况，优惠力度是能够影响优惠券的使用频率的。因此需要对Discount_rate进行转化
#根据Discount_rate标识出折扣率
import re
regex=re.compile('^\d+:\d+$')

def discount_percent(y):
    if y['Discount_rate'] == 'null' and np.isnan(y['Date_received']):
        print('null')
        return 'null'
    elif re.match(regex,y['Discount_rate']):
        num_min,num_max=y['Discount_rate'].split(':')
        #print(float(num_max)/float(num_min))
        return float(num_max)/float(num_min)
    else:
        #print(y['Discount_rate'])
        return y['Discount_rate']

offline_train['Discount_rate'] = offline_train.apply(discount_percent,axis=1)
offline_test['Discount_rate'] = offline_test.apply(discount_percent,axis=1)

offline_train['Distance'] = offline_train['Distance'].fillna(5)
offline_test['Distance'] = offline_test['Distance'].fillna(5)

offline_train.head(5)

features =['Discount_rate','Distance']  #存储特征的，以后要是多了特征，再增加即可
x = offline_train[features]   #特征
y = offline_train['label']    #结果标签,一维序列
x_tr,x_te,y_tr,y_te =train_test_split(x,y,test_size=0.2,stratify=y) #数据拆分，将训练样本拆分成训练集和验证集

print('训练集大小:',y_tr.size) #训练集大小
print('验证集大小:',y_te.size) #验证集大小
print('训练集和验证集大小的比值',y_tr.size/y_te.size) #训练集和验证集大小的比值
print('训练集和验证集正样本（label为1）的比值',y_tr.sum()/y_te.sum()) #训练集和验证集正样本（'label'为1）的比值


#集成学习梯度提升决策树GradientBoostingClassifier分类模型
model = GradientBoostingClassifier(n_estimators=100,max_depth=3)
model.fit(x,y)    #模型训练

#'''
model.predict_proba(x_te)   #预测样本的各类标签（这里是0和1）的概率
y_yu = model.predict_proba(x_te)[:,1]   #'label'为1的概率！
yauc = roc_auc_score(y_te,y_yu)    # （AUC值）这是验证集上的性能结果
print('（AUC值）这是验证集上的性能结果',yauc)  #0.7562965479066022
#'''

#模型预测
X_test = offline_test[features]
Y_test = model.predict_proba(X_test)[:, 1]  #'label'为1的概率！
submission = offline_test[['User_id', 'Coupon_id', 'Date_received']].copy()
submission['Probability'] = Y_test
submission.to_csv('output/submission-teacher.csv', index=None, header=None)
# 这里生成的文件：submission1.csv 提交到比赛网站即可！